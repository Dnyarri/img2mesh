#!/usr/bin/env python3

"""
IMG2OBJ - Conversion of image heightfield to triangle mesh in Wavefront OBJ format
-----------------------------------------------------------------------------------

Created by: `Ilya Razmanov<mailto:ilyarazmanov@gmail.com>`_ aka `Ilyich the Toad<mailto:amphisoft@gmail.com>`_.

Overview
---------

list2obj present function for converting image-like nested X,Y,Z int lists to
3D triangle mesh height field in Wavefront OBJ format.

This version represents geometry variant №1, two triangles fold per four pixels,
bent according to local gradient.

This version was superseded by geometry №3 with four triangle pyramids.

This version is suspended, frozen, mothballed and encased in carbonite,
but more alive than Lenin.

Usage
------

    `list2obj.list2obj(image3d, maxcolors, result_file_name)`

where:

    `image3d` - image as list of lists of lists of int channel values;

    `maxcolors` - maximum value of int in `image3d` list;

    `result_file_name` - name of OBJ file to export.

Reference
----------

`B1. Object Files (.obj)<https://paulbourke.net/dataformats/obj/obj_spec.pdf>`_.

-------------------
Main site: `The Toad's Slimy Mudhole <https://dnyarri.github.io>`_

Git repositories:
`Main at Github <https://github.com/Dnyarri/img2mesh>`_;
`Gitflic mirror <https://gitflic.ru/project/dnyarri/img2mesh>`_

"""

__author__ = 'Ilya Razmanov'
__copyright__ = '(c) 2024-2025 Ilya Razmanov'
__credits__ = 'Ilya Razmanov'
__license__ = 'unlicense'
__version__ = '1.22.2.2'
__maintainer__ = 'Ilya Razmanov'
__email__ = 'ilyarazmanov@gmail.com'
__status__ = 'Production'


def list2obj(image3d, maxcolors, resultfilename):
    """Converting nested 3D list to Wavefront OBJ heightfield triangle mesh.

    - `image3d` - image as list of lists of lists of int channel values;
    - `maxcolors` - maximum value of int in `image3d` list;
    - `resultfilename` - name of OBJ file to export.

    """

    Y = len(image3d)
    X = len(image3d[0])
    Z = len(image3d[0][0])

    """ ╔═══════════════╗
        ║ src functions ║
        ╚═══════════════╝ """

    def src(x, y, z):
        """Analog of src from FilterMeister, force repeat edge instead of out of range.
        Returns channel z value for pixel x, y.

        **WARNING:** Coordinate system mirrored against Y!"""

        cx = min((X - 1), max(0, int(x)))
        cy = min((Y - 1), max(0, int(Y - 1 - y)))

        channelvalue = image3d[cy][cx][z]

        return channelvalue

    def src_lum(x, y):
        """Returns brightness of pixel x, y, multiplied by opacity if exists, normalized to 0..1 range."""

        if Z == 1:  # L
            yntensity = src(x, y, 0)
        elif Z == 2:  # LA, multiply L by A. A = 0 is transparent, a = maxcolors is opaque
            yntensity = src(x, y, 0) * src(x, y, 1) / maxcolors
        elif Z == 3:  # RGB
            yntensity = 0.298936021293775 * src(x, y, 0) + 0.587043074451121 * src(x, y, 1) + 0.114020904255103 * src(x, y, 2)
        elif Z == 4:  # RGBA, multiply calculated L by A.
            yntensity = (0.298936021293775 * src(x, y, 0) + 0.587043074451121 * src(x, y, 1) + 0.114020904255103 * src(x, y, 2)) * src(x, y, 3) / maxcolors

        return yntensity / float(maxcolors)


    """ ╔══════════════════╗
        ║ Writing OBJ file ║
        ╚══════════════════╝ """

    # ↓ Global positioning and scaling to tweak.

    X_OFFSET = -0.5 * (X - 1.0)  # To be added BEFORE rescaling to center object.
    Y_OFFSET = -0.5 * (Y - 1.0)  # To be added BEFORE rescaling to center object

    XY_RESCALE = 1.0 / (max(X, Y) - 1.0)  # To fit object into 1,1,1 cube

    def x_out(x, shift):
        """Recalculate source x to result x"""
        return XY_RESCALE * (x + shift + X_OFFSET)

    def y_out(y, shift):
        """Recalculate source y to result y"""
        return XY_RESCALE * (y + shift + Y_OFFSET)

    # ↓ Float output precision. Max for Python double is supposed to be 16, however
    #   for 16-bit images 7 is enough.
    PRECISION = '7f'

    resultfile = open(resultfilename, 'w')

    """ ┌────────────┐
        │ OBJ header │
        └────────────┘ """
    resultfile.write(f'# Generated by: {f"{__name__}".rpartition(".")[2]} v. {__version__}\n')

    resultfile.write('o pryanik_nepechatnyj\n')  # opening object

    """ ┌──────┐
        │ Mesh │
        └──────┘ """

    for y in range(Y - 1):
        for x in range(X - 1):
            if x == 0:
                v1 = src_lum(x, y)  # Current pixel to process and write. Then going to neighbours
                v2 = src_lum(x + 1, y)
                v3 = src_lum(x + 1, y + 1)
                v4 = src_lum(x, y + 1)
            else:
                v1 = v2
                v4 = v3
                v2 = src_lum(x + 1, y)
                v3 = src_lum(x + 1, y + 1)

            # ↓ Finally going to build a fold!

            fold = []

            if abs(v1 - v3) > abs(v2 - v4):
                # Fold along 2 - 4 diagonal
                if (v1 + v4 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        [
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v1:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v2:.{PRECISION}}\n',
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v4:.{PRECISION}}\n',
                            'f -3 -2 -1\n',
                        ]
                    )  # ↑ triangle 1-2-4
                if (v4 + v3 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        [
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v4:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v2:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v3:.{PRECISION}}\n',
                            'f -3 -2 -1\n',
                        ]
                    )  # ↑ triangle 4-2-3
            # ↑ Fold construction complete.
            else:
                # Fold along 1 - 3 diagonal
                if (v1 + v3 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        [
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v1:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v2:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v3:.{PRECISION}}\n',
                            'f -3 -2 -1\n',
                        ]
                    )  # ↑ triangle 1-2-3
                if (v1 + v4 + v3) > (0.5 / maxcolors):
                    fold.extend(
                        [
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 0):.{PRECISION}} {v1:.{PRECISION}}\n',
                            f'v {x_out(x, 1):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v3:.{PRECISION}}\n',
                            f'v {x_out(x, 0):.{PRECISION}} {y_out(y, 1):.{PRECISION}} {v4:.{PRECISION}}\n',
                            'f -3 -2 -1\n',
                        ]
                    )  # ↑ triangle 1-3-4
            # ↑ Fold construction complete.
            # Writing fold.
            resultfile.write(''.join(fold))

    resultfile.write('# end pryanik_nepechatnyj')  # closing object

    # ↓ Close output
    resultfile.close()

    return None


# ↓ Procedure end, main body begins
if __name__ == '__main__':
    print('Module to be imported, not run as standalone')
