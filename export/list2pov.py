#!/usr/bin/env python3

"""
IMG2POV - Conversion of image heightfield to triangle mesh in POV-Ray format
-----------------------------------------------------------------------------

Created by: `Ilya Razmanov<mailto:ilyarazmanov@gmail.com>`_ aka `Ilyich the Toad<mailto:amphisoft@gmail.com>`_.

Overview
---------

`list2pov` present function for converting image-like nested X,Y,Z int lists to
3D triangle mesh height field in POV-Ray format.

Usage
------

    `list2pov.list2pov(image3d, maxcolors, result_file_name)`

where:

    `image3d`: image as list of lists of lists of int channel values;

    `maxcolors`: maximum value of int in `image3d` list;

    `result_file_name`: name of POV-Ray file to export.

Reference
----------

`POV-Ray Documentation, Section 2.4.2.3 Mesh<https://www.povray.org/documentation/view/3.7.1/292/>`_.

History
--------

0.0.1.0     Initial standalone img2mesh version with 2x2 folding mesh, Dec 2023.

0.0.2.0     Switched to 1x4 pyramid mesh, Jan 2024.

This version represents geometry variant №1, two triangles fold per four pixels,
bent according to local gradient.

This version was superseded by geometry №3 with four triangle pyramids.

This version is suspended, frozen, mothballed and encased in carbonite,
but more alive than Lenin.

-------------------
Main site: `The Toad's Slimy Mudhole <https://dnyarri.github.io>`_

Git repositories:
`Main at Github <https://github.com/Dnyarri/img2mesh>`_;
`Gitflic mirror <https://gitflic.ru/project/dnyarri/img2mesh>`_

"""

__author__ = 'Ilya Razmanov'
__copyright__ = '(c) 2023-2025 Ilya Razmanov'
__credits__ = 'Ilya Razmanov'
__license__ = 'unlicense'
__version__ = '1.22.2.2'
__maintainer__ = 'Ilya Razmanov'
__email__ = 'ilyarazmanov@gmail.com'
__status__ = 'Production'


def list2pov(image3d, maxcolors, resultfilename):
    """Convert nested 3D list of X, Y, Z coordinates to POV heightfield triangle mesh.

    - `image3d` - image as list of lists of lists of int channel values;
    - `maxcolors` - maximum value of int in `image3d` list;
    - `resultfilename` - name of POV file to export.

    """

    Y = len(image3d)
    X = len(image3d[0])
    Z = len(image3d[0][0])

    """ ╔═══════════════╗
        ║ src functions ║
        ╚═══════════════╝ """

    def src(x, y, z):
        """Analog of src from FilterMeister, force repeat edge instead of out of range.
        Returns channel z value for pixel x, y."""

        cx = min((X - 1), max(0, int(x)))
        cy = min((Y - 1), max(0, int(y)))

        channelvalue = image3d[cy][cx][z]

        return channelvalue

    def src_lum(x, y):
        """Returns brightness of pixel x, y, multiplied by opacity if exists, normalized to 0..1 range."""

        if Z == 1:  # L
            yntensity = src(x, y, 0)
        elif Z == 2:  # LA, multiply L by A. A = 0 is transparent, a = maxcolors is opaque
            yntensity = src(x, y, 0) * src(x, y, 1) / maxcolors
        elif Z == 3:  # RGB
            yntensity = 0.298936021293775 * src(x, y, 0) + 0.587043074451121 * src(x, y, 1) + 0.114020904255103 * src(x, y, 2)
        elif Z == 4:  # RGBA, multiply calculated L by A.
            yntensity = (0.298936021293775 * src(x, y, 0) + 0.587043074451121 * src(x, y, 1) + 0.114020904255103 * src(x, y, 2)) * src(x, y, 3) / maxcolors

        return yntensity / float(maxcolors)


    """ ╔══════════════════╗
        ║ Writing POV file ║
        ╚══════════════════╝ """

    resultfile = open(resultfilename, 'w')

    """ ┌────────────┐
        │ POV header │
        └────────────┘ """

    resultfile.write('\n'.join(
        [
            '/*',
            'Persistence of Vision Ray Tracer Scene Description File',
            'Version: 3.7',
            'Description: A triangle mesh scene file converted from image heightfield.',
            '   Coordinate system mimic Photoshop, i.e. the origin is top left corner.',
            '   Z axis points toward viewer.\n',
            'IMPORTANT:',
            '   Generated .pov file may be directly used as include, if the main file contain the following:\n',
            '       #declare Main = 1;',
            '       #declare thething_transform = transform{rotate <0, 0, 0>}',
            '       #include "generated.pov"',
            '       object {thething}\n',
            '   "Main" variable in master file turns off camera, light and texture in include file, allowing master file to take over.',
            '   Using "thething_transform" is recommended way to transform object since it affects inside vector as well.',
            '   Remember to #declare values before #include file if you want include to detect these values exist and stop declaring them on its own!\n',
            f'Source image properties: Width {X} px, Height {Y} px, Colors per channel: {maxcolors + 1}',
            f'File automatically generated by {f"{__name__}".rpartition(".")[2]} v. {__version__}',
            '   developed by Ilya Razmanov aka Ilyich the Toad',
            '       https://dnyarri.github.io',
            '       mailto:ilyarazmanov@gmail.com\n*/\n\n',
        ])
    )

    """ ┌────────────────────────────┐
        │ General statements and map │
        └────────────────────────────┘ """

    resultfile.write('\n'.join(
        [
            '#version 3.7;\n',
            '#ifndef (Main)  // Include check 1\n',
            '  global_settings{',
            '    max_trace_level 3   // Set low to speed up rendering. May need to be increased for metals and glasses',
            '    adc_bailout 0.01    // Set high to speed up rendering. May need to be decreased to 1/256 for better quality',
            '    ambient_light <0.5, 0.5, 0.5>',
            '    assumed_gamma 1.0\n  }\n',
            '#end  // End include check 1\n',
            '#include "transforms.inc"\n',
            '\n/*    Map function\nMaps are transfer functions z value is passed through.\nResult is similar to Photoshop or GIMP "Curves" applied to source heightfield PNG,\nbut here map is nondestructively applied to mesh within POV-Ray.\nBy default exported map is five points linear spline, corresponding to straight line\ndescribing "identical" transform, i.e. input = output.\nYou can both edit existing control points and add new ones. Note that points order is irrelevant\nsince POV-Ray will resort vectors according to entry value (first digits in the row before comma),\nso you can add middle points at the end of the list below or write the whole list upside down. */\n',
            '#ifndef (Curve)  // Checking whether map is defined in main file',
            '  #declare Curve = function {  // Spline curve construction begins',
            '    spline { linear_spline',
            '      0.0,   <0.0,   0>,',
            '      0.25,  <0.25,  0>,',
            '      0.5,   <0.5,   0>,',
            '      0.75,  <0.75,  0>,',
            '      1.0,   <1.0,   0>}\n    };  // Construction complete',
            '#end  // End map definition check',
            '#ifndef (map) #declare map = function(c) {Curve(c).u}; #end  // Spline curve assigned as map\n',
        ])
    )

    """ ┌───────────────────────────┐
        │ Global thething transform │
        └───────────────────────────┘ """
    resultfile.write('\n'.join(
        [
            '\n/*  Global thething transform',
            'It is highly recommended to transform final boxedthing here and not in the end',
            'to keep inside vector glued to thething! */\n',
            '#ifndef (thething_transform)  // Include check',
            '  #declare thething_transform = transform{\n  // You can place your global scale, rotate etc. here\n};',
            '#end\n\n',
        ])
    )

    """ ┌───────────────────────────┐
        │ Camera, light and texture │
        └───────────────────────────┘ """

    resultfile.write('\n'.join(
        [
            '\n#ifndef (Main)  // Include check 2\n',
            '/*  Camera\n',
            'Coordinate system for the whole scene match Photoshop',
            'Origin is top left, z points at you */\n',
            '#declare camera_position = <0.0, 0.0, 3.0>;  // Camera position over object, used for angle\n',
            'camera {',
            '//  orthographic',
            '  location camera_position',
            '  right x*image_width/image_height',
            '  up y',
            '  sky <0, -1, 0>',
            '  direction <0, 0, vlength(camera_position - <0.0, 0.0, 1.0>)>  // May alone work for many objects. Otherwise fiddle with angle below',
            f'  angle 2.0*(degrees(atan2(0.5 * image_width * max({X}/image_width, {Y}/image_height) / {max(X, Y)}, vlength(camera_position - <0.0, 0.0, 1.0>)))) // Supposed to fit object',
            '  look_at <0.0, 0.0, 0.5>',
            '}\n',
            'light_source {<-5, -5, 5>',
            '    color rgb <1.0, 1.0, 1.0>',
            '//    area_light <1, 0, 0>, <0, 1, 0>, 5, 5 circular orient area_illumination on',
            '}',
            'light_source {<7, -3, 3>',
            '    color rgb <1.0, 1.0, 1.0>',
            '//    area_light <1, 0, 0>, <0, 1, 0>, 5, 5 circular orient area_illumination on',
            '}',
            'light_source {camera_position',
            '    color rgb <0.01, 0.01, 0.01>',
            '}',
            '\n//  Layered thething texture',
            '#declare thething_texture_bottom =    // Smooth z gradient',
            '  texture {',
            '    pigment {',
            '    gradient z',
            '      colour_map {',
            '        [0.0, rgb <1, 0, 0>]',
            '        [0.5, rgb <0, 0, 1>]',
            '        [1.0, rgb <1, 1, 1>]',
            '      }',
            '    }',
            '    finish {phong 1.0}',
            '  }\n',
            '#declare thething_texture_top =       // Sharp horizontals overlay',
            '  #declare line_width = 0.01;',
            '  texture {',
            '    pigment {',
            '    gradient z',
            '      colour_map {',
            '        [0.0, rgbt <0,0,0,1>]',
            '        [0.5 - line_width, rgbt <0,0,0,1>]',
            '        [0.5 - line_width, rgbt <0,0,0,0>]',
            '        [0.5, rgbt <0,0,0,0>]',
            '        [0.5 + line_width, rgbt <0,0,0,0>]',
            '        [0.5 + line_width, rgbt <0,0,0,1>]',
            '        [1.0, rgbt <0,0,0,1>]',
            '      }',
            '    }',
            '    scale 0.1',
            '  }\n',
            '#declare thething_texture =           // Overall texture used in the end',
            '    texture {thething_texture_bottom}',
            '    texture {thething_texture_top}',
            '\n\n#end  // End include check 2',
            '\n\n// Main mesh "thething" begins. NOW!\n',
        ])
    )

    """ ┌──────┐
        │ Mesh │
        └──────┘ """

    # Global positioning and scaling to tweak.

    X_OFFSET = -0.5 * (X - 1.0)  # To be added BEFORE rescaling to center object.
    Y_OFFSET = -0.5 * (Y - 1.0)  # To be added BEFORE rescaling to center object

    XY_RESCALE = 1.0 / (max(X, Y) - 1.0)  # To fit object into 1,1,1 cube

    def x_out(x, shift):
        """Recalculate source x to result x"""
        return XY_RESCALE * (x + shift + X_OFFSET)

    def y_out(y, shift):
        """Recalculate source y to result y"""
        return XY_RESCALE * (y + shift + Y_OFFSET)

    PRECISION = '7f'  # Float output precision.
    # Max for Python double is supposed to be 16, however for 16-bit images 7 is enough.

    resultfile.write('\n#declare thething = mesh {\n')  # Opening mesh object "thething"

    # Now going to cycle through image and build mesh

    for y in range(Y - 1):  # Mesh includes extra pixels at the right and below, therefore -1
        resultfile.write(f'\n\n   // Row {y}\n')

        for x in range(X - 1):  # Mesh includes extra pixels at the right and below, therefore -1
            """Pixel order around default pixel 1.
            ┌───┬───┐
            │ 1 │ 2 │
            ├───┼───┤
            │ 4 │ 3 │
            └───┴───┘ """
            if x == 0:
                v1 = src_lum(x, y)  # Current pixel to process and write. Then going to neighbours
                v2 = src_lum(x + 1, y)
                v3 = src_lum(x + 1, y + 1)
                v4 = src_lum(x, y + 1)
            else:
                v1 = v2
                v4 = v3
                v2 = src_lum(x + 1, y)
                v3 = src_lum(x + 1, y + 1)

            # Finally going to build a fold!
            # Triangles are described counterclockwise.

            fold = []

            if abs(v1 - v3) > abs(v2 - v4):
                # Fold along 2 - 4 diagonal
                if (v1 + v4 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        f'\n    triangle {{<{x_out(x, 0):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v1:.{PRECISION}})> <{x_out(x, 0):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v4:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v2:.{PRECISION}})>}}'
                    )  # Triangle 1-4-2

                if (v4 + v3 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        f'\n    triangle {{<{x_out(x, 0):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v4:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v3:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v2:.{PRECISION}})>}}'
                    )  # Triangle 4-3-2
            # Fold construction complete.

            else:
                # Fold along 1 - 3 diagonal
                if (v1 + v3 + v2) > (0.5 / maxcolors):
                    fold.extend(
                        f'\n    triangle {{<{x_out(x, 0):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v1:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v3:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v2:.{PRECISION}})>}}'
                    )  # Triangle 1-3-2

                if (v1 + v4 + v3) > (0.5 / maxcolors):
                    fold.extend(
                        f'\n    triangle {{<{x_out(x, 0):.{PRECISION}}, {y_out(y, 0):.{PRECISION}}, map({v1:.{PRECISION}})> <{x_out(x, 0):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v4:.{PRECISION}})> <{x_out(x, 1):.{PRECISION}}, {y_out(y, 1):.{PRECISION}}, map({v3:.{PRECISION}})>}}'
                    )  # Triangle 1-4-3
            # Fold construction complete.
            # Writing fold.
            resultfile.write(''.join(fold))

    resultfile.write('\n'.join(
        [
            '\n\n  inside_vector vtransform(<0, 0, 1>, thething_transform)\n',
            f'//  clipped_by {{plane {{-z, {-1.0 / maxcolors:.{PRECISION}}}}}}  // Variant of cropping baseline on minimal color step\n',
            'transform thething_transform\n',
            '}\n//    Closed thething\n\n',
        ])
    )  # Main object thething finished

    """ ┌────────────────────────────────────┐
        │ Inserting finished mesh into scene │
        └────────────────────────────────────┘ """

    resultfile.write('\n'.join(
        [
            '\n#ifndef (Main)  // Include check 3\n',
            '#declare xy_clip = 1E-7;  // Side clipping for bounding box to remove roundoff artifacts',
            '#declare boxedthing = object {',
            '  intersection {',
            '    box {<-0.5 + xy_clip, -0.5 + xy_clip, 0>, <0.5 - xy_clip, 0.5 - xy_clip, 1.1>',
            '    // Beware of round-off errors when transforming: bounding box may hit thething!',
            '          pigment {rgb <0.5, 0.5, 5>}',
            '         transform thething_transform\n    }',
            '    object {thething texture {thething_texture}}',
            '    // Beware of round-off errors when transforming: texture may move away!',
            '  }',
            '}',
            '//    Constructed CGS "boxedthing" of mesh plus bounding box thus adding side walls and bottom\n',
            'object {boxedthing}\n',
            '\n#end  // End include check 3\n',
            '\n/*\n\nhappy rendering\n\n  0~0\n (---)\n(.>|<.)\n-------\n\n*/',
        ])
    )  # Closing scene

    # Close output file
    resultfile.close()

    return None


# Procedure end, main body begins
if __name__ == '__main__':
    print('Module to be imported, not run as standalone')
